set cut_paste_input [stack 0]
version 11.3 v5
push $cut_paste_input
Group {
 name ClarisseDenoiser
 selected true
 xpos 290
 ypos -25
 addUserKnob {20 ClarisseDenoiser}
 addUserKnob {41 outDir T CDenoiserNode.outDir}
 addUserKnob {41 strength T CDenoiserNode.strength}
 addUserKnob {41 albedo T CDenoiserNode.albedo}
 addUserKnob {41 normal -STARTLINE T CDenoiserNode.normal}
 addUserKnob {41 findChannnel -STARTLINE T CDenoiserNode.findChannnel}
 addUserKnob {41 useAlbedo T CDenoiserNode.useAlbedo}
 addUserKnob {41 useNormal -STARTLINE T CDenoiserNode.useNormal}
 addUserKnob {41 threads T CDenoiserNode.threads}
 addUserKnob {41 denoise -STARTLINE T CDenoiserNode.denoise}
 addUserKnob {26 ""}
 addUserKnob {41 clarisseRoot T CDenoiserNode.clarisseRoot}
}
 Input {
  inputs 0
  name Input1
  xpos 144
  ypos -137
 }
 NoOp {
  name CDenoiserNode
  selected true
  xpos 144
  ypos -64
  addUserKnob {20 ClarisseDenoiser}
  addUserKnob {2 outDir}
  addUserKnob {7 strength}
  strength 1
  addUserKnob {4 albedo M {"" ""}}
  addUserKnob {4 normal -STARTLINE M {""}}
  addUserKnob {22 findChannnel -STARTLINE T "node = nuke.thisNode()\nchannels = set()\n\n\nfor c in node.channels():\n    channelName = c.split(\".\")\[0]\n    channels.add(channelName)\n\n\nnode\[\"albedo\"].setValues(list(channels))\nnode\[\"normal\"].setValues(list(channels))"}
  addUserKnob {6 useAlbedo +STARTLINE}
  addUserKnob {6 useNormal -STARTLINE}
  addUserKnob {3 threads}
  addUserKnob {22 denoise -STARTLINE T "import nuke\nimport os\nimport threading\nimport sys\n\n\n\nclass Denoiser(threading.Thread):\n    def __init__(self, threadID, srcfile, outfile, strength=1, usealbedo=0, albedo=\"\", usenormal=0, normal=\"\"):\n        super(Denoiser, self).__init__()\n        self.srcfile = srcfile\n        self.outfile = outfile\n        self.strength = strength\n        self.usealbedo = usealbedo\n        self.albedo = albedo\n        self.usenormal = usenormal\n        self.normal = normal\n        self.threadID = threadID\n\n\n    def run(self):\n        print \"Denoiser Current thread id %s\" % self.threadID\n        print \"-\" * 20\n        Denoiser.denoiser(self.srcfile, self.outfile, self.strength, self.usealbedo,\n                          self.albedo, self.usenormal, self.normal)\n\n\n    @staticmethod\n    def denoiser(srcfile, outfile, strength, usealbedo=0, albedo=\"\", usenormal=0, normal=\"\"):\n        if usealbedo:\n            cmd = \"cdenoise.exe %s -strength %s -albedo %s -output %s\" % (\n                srcfile, strength, albedo, outfile)\n        elif usenormal:\n            cmd = \"cdenoise.exe %s -strength %s -albedo %s -world_normal %s -output %s\" % (\n                srcfile, strength, albedo, normal, outfile)\n        else:\n            cmd = \"cdenoise.exe %s -strength %s -output %s\" % (\n                srcfile,  outfile)\n        return os.system(cmd)\n\n\n\nif __name__ == \"__main__\":\n    node = nuke.thisNode()\n    imageNode = nuke.thisGroup().input(0)\n    iamgeRange = int(imageNode\[\"last\"].getValue())\n    imageFile = imageNode\[\"file\"].getValue()\n\n\n    imageFiles = \[]\n\n\n    getStrength = node\[\"strength\"].getValue()\n\n\n    sys.path.append(node\[\"clarisseRoot\"].getValue())\n\n\n    print \"prograss in Set Channel\"\n\n\n    useAlbedo = int(node\[\"useAlbedo\"].getValue())\n    useNormal = int(node\[\"useNormal\"].getValue())\n    channelAlbedoNum = int(node\[\"albedo\"].getValue())\n    channelAlbedo = node\[\"albedo\"].enumName(channelAlbedoNum)\n    channelNormalNum = int(node\[\"normal\"].getValue())\n    channelNormal = node\[\"normal\"].enumName(channelAlbedoNum)\n\n\n    print \"prograss in Set File\"\n\n\n    try:\n        imageFiles = \[imageFile % int(f + 1) for f in range(iamgeRange)]\n    except TypeError as e:\n        print \"Single File\"\n        imageFiles.append(imageFile)\n\n\n    def out(x): return os.path.join(*x)\n    def getName(x): return os.path.split(x)\[-1]\n\n\n    outDir = node\[\"outDir\"].getValue()\n    outFiles = \[out((outDir, getName(f))) for f in imageFiles]\n\n\n    print imageFiles\n    print \"prograss in Exturde\"\n\n\n    if not node\[\"threads\"].getValue():\n        print \"prograss in No thread\"\n        for i in range(len(imageFiles)):\n            Denoiser.denoiser(\n                imageFiles\[i], outFiles\[i], getStrength, useAlbedo, channelAlbedo, useNormal, channelNormal)\n    else:\n        print \"prograss in Mutli-thread\"\n        threadsNum = int(node\[\"threads\"].getValue())\n        def gen(x): return Denoiser(\n            x, imageFiles\[x], outFiles\[x], getStrength, useAlbedo, channelAlbedo, useNormal, channelNormal)\n        locLast = 0\n        locCurrent = threadsNum\n        fileRange = range(len(imageFiles))\n        print fileRange\n        print \"pass fileRange\"\n        threadRange = int(len(imageFiles) / threadsNum + 1)\n        print \"pass threadRange\"\n        for i in range(threadRange):\n            print \"prograss in set MutilRange\"\n            prosser = map(gen, \[i for i in fileRange\[locLast:locCurrent:]])\n            print \"pass MutilRange\"\n            locLast = locCurrent\n            locCurrent += threadsNum\n            for i in prosser:\n                i.start()\n                i.join()\n\n"}
  addUserKnob {26 ""}
  addUserKnob {1 clarisseRoot}
 }
 Output {
  name Output1
  xpos 144
  ypos 3
 }
end_group
